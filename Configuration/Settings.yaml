Neos:
  EventSourcing:
    EventStore:
      stores: []
#        'Some.Package:SomeEventStore':
#
#          # REQUIRED: Storage implementation that persists events (has to implement EventStorageInterface)
#          storage: 'Neos\EventSourcing\EventStore\Storage\Doctrine\DoctrineEventStorage'
#
#          # OPTIONAL: options that will be passed to the storage instance
#          storageOptions:
#
#              When using the DoctrineEventStorage adapter events are stored in a table called "neos_eventsourcing_eventstore_events" by default. This can be changed per Event Store:
#            eventTableName: 'some_package_custom_events'
#
#              By default the Flow database connection is reused for the EventEvent store backend, but this can be changed per Event Store. Note: BackendOptions will be merged with the Flow default backend options
#            backendOptions:
#              driver: pdo_mysql
#              host: 127.0.0.1
#              dbname: null
#              user: null
#              password: null
#              charset: utf8
#
#              Custom mapping types can be configured (only useful when using a _different_ database connection for the Event Store)
#            mappingTypes:
#              'some_custom_type':
#                dbType: 'json_array'
#                className: 'Some\Type\Implementation'
#
#          # OPTIONAL: implementation for the EventPublisherFactory (needs to implement EventPublisherFactoryInterface). If not set, the DefaultEventPublisherFactory is used
#          eventPublisherFactory: 'Some\Class\Implementing\EventPublisherFactoryInterface'
#
#          # REQUIRED: Event Listener classes that belong to this Event Store
#          # Each key is a class name (supports regular expressions to match multiple).
#          # If the value is an array this will be passed as options to the Event Publisher when a corresponding event is being published
#          listeners:
#            'Some\Specific\EventListener': true
#            'Some\Package\.*': true
#            'Some\Other\.*':
#              # Example: use a custom job queue name (other than "neos-eventsourcing") for these listeners
#              queueName: 'custom-queue'


  # Ignore the default Event Store table ("neos_eventsourcing_eventstore_events") when creating Doctrine migrations
  Flow:
    persistence:
      doctrine:
        migrations:
          ignoredTables:
            'neos_eventsourcing_eventstore_events': true

Flowpack:
  JobQueue:
    Common:
      queues:
        # By default we use the Fake Queue that doesn't need a background process
        # For better performance/scale you should consider using a proper job queue backend
        # See https://github.com/Flowpack/jobqueue-common for more details
        'neos-eventsourcing':
          className: 'Flowpack\JobQueue\Common\Queue\FakeQueue'
          options:
            async: true
